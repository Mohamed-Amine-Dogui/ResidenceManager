

### **1. `users`**

| Field           | Type       | Notes                                |
| --------------- | ---------- | ------------------------------------ |
| `id`            | UUID / INT | Primary key                          |
| `email`         | VARCHAR    | Unique, indexed                      |
| `password_hash` | VARCHAR    | Store hashed password only           |
| `role`          | VARCHAR    | e.g., `'user'`, `'admin'`, `'guest'` |
| `created_at`    | TIMESTAMP  | Auto-generated                       |
| `last_login`    | TIMESTAMP  | Updated on each login                |

---

### **2. `auth_providers`**

| Field           | Type       | Notes                                     |
| --------------- | ---------- | ----------------------------------------- |
| `id`            | UUID / INT | Primary key                               |
| `provider_name` | VARCHAR    | e.g., `'email'`, `'google'`, `'facebook'` |
| `description`   | TEXT       | Optional                                  |

---

### **3. `user_providers`** (Join table for external logins)

| Field         | Type       | Notes                        |
| ------------- | ---------- | ---------------------------- |
| `id`          | UUID / INT | Primary key                  |
| `user_id`     | UUID / INT | FK to `users`                |
| `provider_id` | UUID / INT | FK to `auth_providers`       |
| `external_id` | VARCHAR    | e.g., Google or Facebook UID |
| `linked_at`   | TIMESTAMP  | When the account was linked  |

---

### **4. `login_attempts`**

| Field        | Type       | Notes                                 |
| ------------ | ---------- | ------------------------------------- |
| `id`         | UUID / INT | Primary key                           |
| `user_id`    | UUID / INT | FK to `users` (nullable for guests)   |
| `email`      | VARCHAR    | Used for login even if user not found |
| `success`    | BOOLEAN    | Indicates if login was successful     |
| `provider`   | VARCHAR    | `'email'`, `'google'`, etc.           |
| `ip_address` | VARCHAR    | Optional                              |
| `timestamp`  | TIMESTAMP  | Auto-generated                        |

---

### **5. `password_reset_requests`**

| Field          | Type       | Notes          |
| -------------- | ---------- | -------------- |
| `id`           | UUID / INT | Primary key    |
| `user_id`      | UUID / INT | FK to `users`  |
| `reset_token`  | VARCHAR    | Unique, secure |
| `requested_at` | TIMESTAMP  |                |
| `used_at`      | TIMESTAMP  | Nullable       |




### reservations`**

| Field            | Type       | Notes                           |
| ---------------- | ---------- | ------------------------------- |
| `id`             | UUID / INT | Primary key                     |
| `nom`            | VARCHAR    | Guest name                      |
| `telephone`      | VARCHAR    | Optional                        |
| `email`          | VARCHAR    | Optional                        |
| `checkin_date`   | DATE       | Required                        |
| `checkout_date`  | DATE       | Required                        |
| `montant_avance` | DECIMAL    | Advance payment                 |
| `house_id`       | VARCHAR    | FK to `houses.id`               |
| `created_at`     | TIMESTAMP  | Optional: auto-set on insertion |

---

### **2. `houses`**

| Field  | Type    | Notes                        |
| ------ | ------- | ---------------------------- |
| `id`   | VARCHAR | e.g. `maison-1`, primary key |
| `name` | VARCHAR | e.g. `Mv1`, for display      |

---

### **3.  `reservation_logs`** *

| Field            | Type       | Notes                                |
| ---------------- | ---------- | ------------------------------------ |
| `id`             | UUID / INT | Primary key                          |
| `reservation_id` | UUID / INT | FK to `reservations`                 |
| `action`         | VARCHAR    | e.g. `created`, `updated`, `deleted` |
| `timestamp`      | TIMESTAMP  | When the action occurred             |




### **1. `houses`**

| Field  | Type    | Notes                         |
| ------ | ------- | ----------------------------- |
| `id`   | VARCHAR | e.g., `maison-1`, Primary Key |
| `name` | VARCHAR | e.g., `Mv1`, Display name     |

---

### **2. `checklist_categories`**

| Field  | Type    | Notes                            |
| ------ | ------- | -------------------------------- |
| `id`   | INT     | Primary Key                      |
| `name` | VARCHAR | e.g., `Cuisine`, `Salle de Bain` |

---

### **3. `checklist_items`**

| Field              | Type       | Notes                                          |
| ------------------ | ---------- | ---------------------------------------------- |
| `id`               | UUID / INT | Primary Key                                    |
| `house_id`         | VARCHAR    | FK to `houses.id`                              |
| `step_number`      | INT        | Logical ordering of steps (e.g., 1, 2, 3...)   |
| `category_id`      | INT        | FK to `checklist_categories.id`                |
| `description`      | TEXT       | What needs to be done                          |
| `product_required` | TEXT       | Products/tools to be used                      |
| `type`             | VARCHAR    | Enum: `nettoyage`, `vérification`, `entretien` |

---



### **Existing Tables from Previous Page (still valid):**

#### **1. `houses`**

| Field  | Type    | Notes                        |
| ------ | ------- | ---------------------------- |
| `id`   | VARCHAR | Primary key, e.g. `maison-1` |
| `name` | VARCHAR | Display name                 |

#### **2. `checklist_categories`**

| Field  | Type    | Notes                           |
| ------ | ------- | ------------------------------- |
| `id`   | INT     | Primary key                     |
| `name` | VARCHAR | e.g., `Cuisine`, `Entrée`, etc. |

#### **3. `checklist_items`**

| Field              | Type       | Notes                                    |
| ------------------ | ---------- | ---------------------------------------- |
| `id`               | UUID / INT | Primary key                              |
| `category_id`      | INT        | FK to `checklist_categories.id`          |
| `description`      | TEXT       | Task description                         |
| `product_required` | TEXT       | Optional products                        |
| `type`             | VARCHAR    | `nettoyage`, `vérification`, `entretien` |

---

### **New Tables Required for Control / Status Tracking:**

#### **4. `house_checklist_status`**

Represents **which items** are completed for **which house**.

| Field          | Type       | Notes                      |
| -------------- | ---------- | -------------------------- |
| `id`           | UUID / INT | Primary key                |
| `house_id`     | VARCHAR    | FK to `houses.id`          |
| `item_id`      | UUID / INT | FK to `checklist_items.id` |
| `is_completed` | BOOLEAN    | Default: false             |
| `completed_at` | TIMESTAMP  | Nullable                   |

> One record per (house × checklist item)

---

#### **5. `house_category_status`** *(optional but efficient)*

Tracks **category-level readiness** per house.

| Field         | Type       | Notes                           |
| ------------- | ---------- | ------------------------------- |
| `id`          | UUID / INT | Primary key                     |
| `house_id`    | VARCHAR    | FK to `houses.id`               |
| `category_id` | INT        | FK to `checklist_categories.id` |
| `is_ready`    | BOOLEAN    | True if all tasks are completed |
| `ready_at`    | TIMESTAMP  | Optional                        |


---

### Euro **1. `houses`**

| Field  | Type    | Notes                          |
| ------ | ------- | ------------------------------ |
| `id`   | VARCHAR | Primary key (`maison-1`, etc.) |
| `name` | VARCHAR | Display name (`Mv1`, etc.)     |

---

### Euro **2. `reservations`**

| Field           | Type       | Notes                     |
| --------------- | ---------- | ------------------------- |
| `id`            | UUID / INT | Primary key               |
| `house_id`      | VARCHAR    | FK to `houses.id`         |
| `guest_name`    | VARCHAR    | `nom` field               |
| `phone`         | VARCHAR    | `telephone` field         |
| `email`         | VARCHAR    | `email` field             |
| `checkin_date`  | DATE       | `checkin` field           |
| `checkout_date` | DATE       | `checkout` field          |
| `advance_paid`  | DECIMAL    | `montantAvance`, optional |
| `created_at`    | TIMESTAMP  | Auto-generated            |
| `updated_at`    | TIMESTAMP  | Auto-updated on edit      |

---

### Euro **3. (Optional) `reservation_audit_log`**

For tracking changes (edit/delete events).

| Field            | Type       | Notes                           |
| ---------------- | ---------- | ------------------------------- |
| `id`             | UUID / INT | Primary key                     |
| `reservation_id` | UUID / INT | FK to `reservations`            |
| `action`         | VARCHAR    | `created`, `updated`, `deleted` |
| `timestamp`      | TIMESTAMP  | When the event occurred         |
| `user_id`        | UUID       | FK to users                     |

---




### **3. `checklist_items`**

| Field              | Type       | Notes                                   |
| ------------------ | ---------- | --------------------------------------- |
| `id`               | UUID / INT | Primary key                             |
| `category_id`      | INT        | FK to `checklist_categories.id`         |
| `description`      | TEXT       | Task description                        |
| `product_required` | TEXT       | Products used (optional)                |
| `type`             | VARCHAR    | Enum: `nettoyage`, `vérification`, etc. |

---

###  **4. `house_checklist_status`**

Tracks **completion of each task per house**.

| Field          | Type       | Notes                                           |
| -------------- | ---------- | ----------------------------------------------- |
| `id`           | UUID / INT | Primary key                                     |
| `house_id`     | VARCHAR    | FK to `houses.id`                               |
| `item_id`      | UUID / INT | FK to `checklist_items.id`                      |
| `is_completed` | BOOLEAN    | Whether the task is marked as done              |
| `completed_at` | TIMESTAMP  | Optional                                        |
| `updated_by`   | UUID       | FK to `users.id`, optional (for audit purposes) |



---

###  **5. `house_category_status`** 

Stores **category-level readiness** per house.

| Field         | Type       | Notes                                    |
| ------------- | ---------- | ---------------------------------------- |
| `id`          | UUID / INT | Primary key                              |
| `house_id`    | VARCHAR    | FK to `houses.id`                        |
| `category_id` | INT        | FK to `checklist_categories.id`          |
| `is_ready`    | BOOLEAN    | True if all category tasks are completed |
| `ready_at`    | TIMESTAMP  | Optional                                 |

---


| Field         | Type      | Notes                                       |
| ------------- | --------- | ------------------------------------------- |
| `id`          | UUID      | Primary key                                 |
| `house_id`    | VARCHAR   | FK → `houses.id`                            |
| `date`        | DATE      | The day in question                         |
| `is_occupied` | BOOLEAN   | True if the house is booked that day        |
| `source`      | VARCHAR   | e.g. `'reservation'`, `'maintenance_block'` |
| `updated_at`  | TIMESTAMP | Optional                                    |




#### `task_completion_logs`

To track **who toggled what and when** (audit/history).

| Field       | Type       | Notes                               |
| ----------- | ---------- | ----------------------------------- |
| `id`        | UUID / INT | Primary key                         |
| `house_id`  | VARCHAR    | FK to `houses.id`                   |
| `item_id`   | UUID / INT | FK to `checklist_items.id`          |
| `user_id`   | UUID / INT | FK to `users.id`                    |
| `completed` | BOOLEAN    | True = completed, False = unchecked |
| `timestamp` | TIMESTAMP  | When the action happened            |




### **1. `maintenance_issues`**

| Field               | Type       | Notes                                           |
| ------------------- | ---------- | ----------------------------------------------- |
| `id`                | UUID / INT | Primary Key                                     |
| `house_id`          | VARCHAR    | FK to `houses.id`                               |
| `issue_type`        | VARCHAR    | Enum: `'electricite'`, `'plomberie'`, etc.      |
| `reported_at`       | DATE       | `dateDeclaration`                               |
| `assigned_to`       | VARCHAR    | `assigne`, plain text                           |
| `comment`           | TEXT       | `commentaire`                                   |
| `status`            | VARCHAR    | `'resolue'` or `'non-resolue'`                  |
| `photo_issue_url`   | TEXT       | URL or file path of issue photo (optional)      |
| `photo_invoice_url` | TEXT       | URL or file path of facture photo (if resolved) |
| `labor_cost`        | DECIMAL    | `prixMainOeuvre` (optional)                     |
| `created_at`        | TIMESTAMP  | Default `now()`                                 |
| `updated_at`        | TIMESTAMP  | Auto-updated on edit                            |

---

### **2. `maintenance_types`** *(optional lookup table)*

| Field   | Type    | Notes                                    |
| ------- | ------- | ---------------------------------------- |
| `id`    | VARCHAR | Primary key: e.g. `electricite`          |
| `label` | VARCHAR | Human-readable label: e.g. `Électricité` |

---

### **3. `maintenance_status_log`** *(optional audit log for status updates)*

| Field        | Type      | Notes                         |
| ------------ | --------- | ----------------------------- |
| `id`         | UUID      | Primary key                   |
| `issue_id`   | UUID      | FK to `maintenance_issues.id` |
| `previous`   | VARCHAR   | Status before update          |
| `new`        | VARCHAR   | Status after update           |
| `changed_at` | TIMESTAMP | Timestamp of the update       |
| `changed_by` | UUID      | FK to `users.id` (nullable)   |
---

Thanks — with this final component in place, we now have a **complete picture of the database structure** needed to support the finance-related features of your app.

Here is a **structured list of DB elements** extracted from all the logic:

---

##  Table: `financial_operations`

Stores individual income/expense transactions per house.

| Column         | Type            | Description                                               |
| -------------- | --------------- | --------------------------------------------------------- |
| `id`           | UUID / SERIAL   | Primary key                                               |
| `date`         | DATE            | Date of transaction                                       |
| `house_id`     | VARCHAR         | FK → `houses(id)`                                         |
| `type`         | ENUM            | `'entree'` or `'sortie'`                                  |
| `motif`        | TEXT            | Description of the transaction                            |
| `montant`      | DECIMAL(10, 2)  | Transaction amount in euros                               |
| `origine`      | ENUM            | `'reservation'`, `'maintenance'`, `'checkin'`, `'manuel'` |
| `piece_jointe` | TEXT (nullable) | Filename or URL of optional receipt or document           |
| `editable`     | BOOLEAN         | Whether this transaction can be edited or deleted         |
| `created_at`   | TIMESTAMP       | Auto timestamp                                            |
| `updated_at`   | TIMESTAMP       | Updated on edit                                           |

---



##  Enum: `operation_type`

Values: `'entree'`, `'sortie'`

##  Enum: `operation_origin`

Values: `'reservation'`, `'maintenance'`, `'checkin'`, `'manuel'`


---

## `file_attachments`

If you decide to manage files in a separate table (

| Column         | Type      | Description                         |
| -------------- | --------- | ----------------------------------- |
| `id`           | UUID      | Primary key                         |
| `operation_id` | UUID      | FK → `financial_operations(id)`     |
| `filename`     | TEXT      | Name or path of the file            |
| `mime_type`    | TEXT      | e.g. `image/png`, `application/pdf` |
| `uploaded_at`  | TIMESTAMP | Upload time                         |




I’m building a full-stack app with React + Vite on the frontend and FastAPI + SQLAlchemy + SQLite on the backend.

I’ve already defined a complete schema for users, reservations, houses, maintenance, financial operations, and checklists.

I want to start building the FastAPI backend, including SQLAlchemy models, routers, and endpoints.

Please use the following schema as the starting point for all further work (models, endpoints, etc.):

(paste your full schema here)

Let’s begin with setting up the models and a clean project layout. After that, I’ll tell you which endpoints I want.